---
title: "BSMM-lab-2"
subtitle: "BSMM 8740 Fall 2023"
author: "Zahra Rohaniasl"
date: "9/25/2023"
format: html
editor: visual
self-contained: true
---

## Setup

Load packages and data:

```{r load-pkg-data}
#| message: false
the_tate <- readr::read_delim("data/the-tate-collection.csv", ";", escape_double = FALSE, trim_ws = TRUE)
the_tate_artists <- readr::read_csv("data/the-tate-artists.csv")
```

```{r}
install.packages("tidyverse")
install.packages("tidymodels")
install.packages("gt")
install.packages("gtexplorer")
install.packages("dataexplorer")

```

```{r}
install.packages("VIM")

```

```{r}
library(magrittr)     # the pipe
library(tidyverse)    # for data wrangling + visualization
library(tidymodels)   # for modeling
library(gt)           # for making display tables
library(gtExtras)     # helper functions for beautiful tables
library(DataExplorer)
library(VIM)
library(colorspace)
library(grid)
```

## Exercises

### Exercise 1

The `the_tate` dataset has \_\_\_ unique artists who worked from \_\_\_ to \_\_\_. The works were acquired between the years \_\_\_ and \_\_\_.

```{r}
glimpse(the_tate_artists)

```

```{r}
View(the_tate)
View(the_tate_artists)
```

```{r}
glimpse(the_tate)

```

```{r}
summary(the_tate)

```

```{r}
# summary of each artist
the_tate %>% dplyr::group_by(the_tate$artist) %>% 
dplyr::summarize(N=n(),min_yearworking= min(the_tate$year,na.rm = TRUE),
max_yearworking= max(the_tate$year,na.rm = TRUE),
min_aquistionyear=min(the_tate$acquisitionYear, na.rm = TRUE),
max_acquisitionyear=max(the_tate$year,na.rm = TRUE)  )
```

```{r}
library(dplyr)
dplyr::summarize(the_tate, .by = NULL, .groups = NULL)
# Use plot_missing() to visualize missing data
plot_missing(data = the_tate)

DataExplorer::introduce(the_tate)
DataExplorer::introduce(the_tate_artists)
DataExplorer::plot_missing(the_tate)
DataExplorer::plot_missing(the_tate_artists)

```

```{r}
#unique artists count
unique_artists <- length(unique(the_tate$artist))

# range of years artists worked
#na.omit() is used to remove rows with missing values before calculating the year ranges. 
artists_years <- the_tate %>%
  filter(!is.na(year)) %>%
  summarize(
    start_year = min(year),
    end_year = max(year)
  )

# range of years when works were acquired
acquired_years <- the_tate %>%
  filter(!is.na(acquisitionYear)) %>%
  summarize(
    start_year = min(acquisitionYear),
    end_year = max(acquisitionYear)
  )

# Print the results
cat("The the_tate dataset has", unique_artists, "unique artists who worked from", 
    artists_years$start_year, "to", artists_years$end_year, ".\n")
cat("The works were acquired between the years", acquired_years$start_year, "and", acquired_years$end_year, ".\n")

```

```         
#The the_tate dataset has 3336 unique artists who worked from 1545 to 2012 . The works were acquired between the years 1823 and 2013 .
```

### Exercise 2

How number of works with missing dates is \_\_.

The number of artists whose works have missing dates is \_\_.

It would require resolving missing year data for only \_\_ artists resolve resolve at least 50% of the missing data.

The missing year data likely to be classified as \_\_\_\_.

```{r}
# Count the number of works with missing dates
works_missing_dates <- sum(is.na(the_tate$year))
works_missing_dates

```

```{r}
the_tate|>dplyr::filter(is.na(year))|>dplyr::distinct(artist)

```

```{r}
# Count the number of unique artists with works missing dates
artists_missing_dates <- the_tate %>%
  filter(is.na(year)) %>%
  distinct(artist) %>%
  nrow()

artists_missing_dates

```

```{r}
# Count the number of works missing years for each artist
artists_missing_year_counts <- the_tate|>dplyr::filter(is.na(year)) %>% 
  group_by(artist) %>%
  summarise(missing_years = sum(is.na(year))) %>%
  arrange(desc(missing_years)) %>%
  as_tibble()
```

```{r}
# Number of artists have works with missing years
artists_missing_years <- nrow(artists_missing_year_counts)
artists_missing_years
```

```{r}
#percentage of total missing data for each artist
artists_missing_year_counts <- artists_missing_year_counts %>%
  mutate(percentage = (missing_years / works_missing_dates) * 100)
```

```{r}
# Cumulative percentage of missing data
artists_missing_year_counts <- artists_missing_year_counts %>%
  mutate(cumulative_percentage = cumsum(percentage))
```

```{r}
# The smallest number of artists needed to resolve at least 50% of the missing year data
artists_to_resolve_50_percent <- min(which(artists_missing_year_counts$cumulative_percentage >= 50))

artists_to_resolve_50_percent
```

#The number of artists whose works have missing dates is \*\*461\*\*.

#It would require resolving missing year data for only \*\*11\*\* artists resolve resolve at least 50% of the missing data.

#The missing year data likely to be classified as \*\*MAR\*\*.

### Exercise 3

The artist with the most works in the Tate collection is \_\_\_.

The artist with the tenth-most works in the Tate collection is \_\_\_.

```{r}
# Number of works for each artist
artist_work_counts <- the_tate %>%
  group_by(artist) %>%
  summarize(title = n()) %>%
  arrange(desc(title))

artist_work_counts

```

```{r}
# Top 10 artists by the number of works
top_10_artists <- artist_work_counts %>%
  slice_head(n = 10)

top_10_artists
```

#The artist with the most works in the Tate collection is Turner, Joseph ...

#The artist with the tenth-most works in the Tate collection is Warhol, Andy.

### Exercise 4

The artist with the greatest number of works in the Tate collection represent \_\_\_% of the total number of works

```{r}
total_works <- nrow(the_tate)
artist_work_counts %<>%mutate(percentage=(title/total_works)*100)

artist_work_counts
```

```{r}
install.packages("gtExtras")
```

```{r}
library(gtExtras)
# Create the table
table <- artist_work_counts %>%
  gt() %>%
  fmt_number(
    columns = c(title, percentage), # Format both title and percentage columns
    decimals = 2 # No decimal places for title, and decimals for percentage
  ) %>%
  tab_header(title = "Top Artists by Number of Works and Percentage of Collection")

print(table)
```

#The artist with the greatest number of works in the Tate collection represent \*\*56.92%\*\* of the total number of works

### Exercise 5

There are \_\_ duplicate artist-title pairs

```{r}
library(dplyr)


total_rows <- total_works
total_rows


# Select only the columns for artist and title, then count distinct pairs
distinct_artist_title_pair <- the_tate %>% select(artist,title) %>% distinct()

# Count of distinct artist-title pairs
distinct_count <- nrow(distinct_artist_title_pair)

distinct_count
```

```{r}
duplicate_count <- total_rows - distinct_count

duplicate_count
```

#There are 23705 duplicate artist-title pairs.

### Exercise 6

The artist with the largest work in the tate collection is \_\_\_

The artist with the smallest work in the collection is \_\_\_. The smallest work has area \_\_\_ $\text{cm}^2$

```{r}
library(dplyr)
library(tidyr)
```

```{r}
# new column for the area of each artwork
the_tate <- the_tate %>%
  mutate(area_cm2 = width * height)

# Select artist, title, and area, remove NA values
selected_artworks <- the_tate %>%
  select(artist, title, area_cm2) %>%
  drop_na() 

# Order the works by area
ordered_artworks <- selected_artworks %>%
  arrange(area_cm2)

# The largest artwork in the collection
largest_artwork <- ordered_artworks %>%
  slice_tail(n = 1)

largest_artwork


# The smallest artwork in the collection
smallest_artwork <- ordered_artworks %>%
  slice_head(n = 1)

smallest_artwork

```

#The artist with the largest work in the tate collection is Therrien, Robert (area_cm2 = 123462000)

#The artist with the smallest work in the collection is Mesens, E.L.T. (area_cm2 = 237)

### Exercise 7

#Join the tables `the_tate` and `the_tate_artists` using `dplyr::left_join`, assigning the result to the variable `the_tate` . Drop rows with `NA` gender values and then group by gender. Show the resulting table.Join the tables `the_tate` and `the_tate_artists` using `dplyr::left_join`, assigning the result to the variable `the_tate` . Drop rows with `NA` gender values and then group by gender. Show the resulting table.

```{r}

# Left join the_tate and the_tate_artists
the_tate <- left_join(the_tate, the_tate_artists, by = c("artist" = "name"))

# Drop rows with NA gender values
the_tate <- the_tate %>%
  filter(!is.na(gender))

# Group by gender and count the occurrences
resulting_table <- the_tate %>%
  group_by(gender) %>%
  summarise(count = n())

# Show the resulting table
resulting_table

```

### Exercise 8

The annual return in the SPX price in 2020 was \_\_\_%.

The corresponding price volatility was \_\_\_%.

```{r}
library(readr)
dataofstock <- read_csv("data/SPX_HistoricalData_1692322132002.csv")
View(dataofstock)


# Add a column for the year of the transaction
dataofstock <- dataofstock %>%
  mutate(Year = lubridate::year(as.Date(Date, format = "%m/%d/%Y")))


dataofstock <- dataofstock %>%
  rename("close"=`Close/Last`)

dataofstock <- dataofstock %>%
  mutate(rd = log(lead(close) / close))


dataofstock <- dataofstock %>%
  mutate(vard = rd^2)

summary_data <- dataofstock %>%
  group_by(Year) %>%
  summarize(
    Annual_Return = (exp(sum(rd, na.rm = TRUE)) - 1)*100,
    Annual_StdDev = sqrt(sum(vard, na.rm = TRUE))*100,
    .groups = "drop"  # Drop grouping after summary
  )

summary_data

```

#The annual return in the SPX price in 2020 was -13.98510%.

#The corresponding price volatility was 34.70043%.

### Exercise 9

The period volatility was \_\_\_.\_%

```{r}
# Calculate the period volatility as the standard deviation of annual returns
period_volatility <- sd(summary_data$Annual_Return)

period_volatility

cat("The period volatility was:",period_volatility, "%\n")

```

```         
The period volatility was: 19.51618 %
```
